<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [spi\managerBox.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image spi\managerBox.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Mon Jan 11 23:02:34 2021
<BR><P>
<H3>Maximum Stack Usage =        728 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; at_process &rArr; at_parse_recv &rArr; parse_another_cmd &rArr; module_init &rArr; Send_AT_Command_Timeout &rArr; Send_AT_Command &rArr; GsmSendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SecureFault_Handler</a><BR>
 <LI><a href="#[36]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[36]">ADC1_2_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[a]">BusFault_Handler</a> from stm32l5xx_it.o(.text.BusFault_Handler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[59]">COMP_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[5b]">CRS_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[37]">DAC_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[73]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[74]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[75]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[76]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel1_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel2_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[30]">DMA1_Channel3_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[31]">DMA1_Channel4_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[32]">DMA1_Channel5_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[33]">DMA1_Channel6_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[34]">DMA1_Channel7_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[35]">DMA1_Channel8_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Channel1_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[60]">DMA2_Channel2_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[61]">DMA2_Channel3_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[62]">DMA2_Channel4_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[63]">DMA2_Channel5_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[64]">DMA2_Channel6_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[65]">DMA2_Channel7_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[66]">DMA2_Channel8_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[2c]">DMAMUX1_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[2d]">DMAMUX1_S_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[e]">DebugMon_Handler</a> from stm32l5xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[1c]">EXTI0_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[26]">EXTI10_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[27]">EXTI11_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[28]">EXTI12_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[29]">EXTI13_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[2a]">EXTI14_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[2b]">EXTI15_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[1d]">EXTI1_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[1e]">EXTI2_IRQHandler</a> from stm32l5xx_it.o(.text.EXTI2_IRQHandler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[1f]">EXTI3_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[20]">EXTI4_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[21]">EXTI5_IRQHandler</a> from stm32l5xx_it.o(.text.EXTI5_IRQHandler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[22]">EXTI6_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[23]">EXTI7_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[24]">EXTI8_IRQHandler</a> from stm32l5xx_it.o(.text.EXTI8_IRQHandler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[25]">EXTI9_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[38]">FDCAN1_IT0_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[39]">FDCAN1_IT1_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[18]">FLASH_S_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[5c]">FMC_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[6d]">FPU_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[19]">GTZC_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[6e]">HASH_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from stm32l5xx_it.o(.text.HardFault_Handler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[49]">I2C1_ER_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[48]">I2C1_EV_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[4b]">I2C2_ER_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[4a]">I2C2_EV_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[68]">I2C3_ER_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[67]">I2C3_EV_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[71]">I2C4_ER_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[72]">I2C4_EV_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[78]">ICACHE_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[54]">LPTIM1_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[55]">LPTIM2_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[6f]">LPTIM3_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[53]">LPUART1_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[9]">MemManage_Handler</a> from stm32l5xx_it.o(.text.MemManage_Handler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from stm32l5xx_it.o(.text.NMI_Handler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[5d]">OCTOSPI1_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[12]">PVD_PVM_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from stm32l5xx_it.o(.text.PendSV_Handler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[1a]">RCC_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[1b]">RCC_S_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[6c]">RNG_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[13]">RTC_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[14]">RTC_S_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[69]">SAI1_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[6a]">SAI2_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[5e]">SDMMC1_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[4c]">SPI1_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[4d]">SPI2_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[70]">SPI3_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from stm32l5xx_it.o(.text.SVC_Handler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[c]">SecureFault_Handler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[10]">SysTick_Handler</a> from stm32l5xx_it.o(.text.SysTick_Handler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[7a]">SystemInit</a> from system_stm32l5xx.o(.text.SystemInit) referenced from startup_stm32l552xx.o(.text)
 <LI><a href="#[15]">TAMP_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[16]">TAMP_S_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[56]">TIM15_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[57]">TIM16_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[58]">TIM17_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[3a]">TIM1_BRK_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[3d]">TIM1_CC_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[3c]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[3b]">TIM1_UP_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[3e]">TIM2_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[3f]">TIM3_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[40]">TIM4_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[41]">TIM5_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[42]">TIM6_IRQHandler</a> from stm32l5xx_it.o(.text.TIM6_IRQHandler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[44]">TIM8_BRK_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[47]">TIM8_CC_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[46]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[45]">TIM8_UP_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[6b]">TSC_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[51]">UART4_IRQHandler</a> from stm32l5xx_it.o(.text.UART4_IRQHandler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[52]">UART5_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[7c]">UART_DMAAbortOnError</a> from stm32l5xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32l5xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[7d]">UART_RxISR_16BIT</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[7d]">UART_RxISR_16BIT</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[7f]">UART_RxISR_16BIT_FIFOEN</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN) referenced 2 times from stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[7e]">UART_RxISR_8BIT</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 2 times from stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN)
 <LI><a href="#[7e]">UART_RxISR_8BIT</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 2 times from stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[80]">UART_RxISR_8BIT_FIFOEN</a> from stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN) referenced 2 times from stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[77]">UCPD1_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[4e]">USART1_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[4f]">USART2_IRQHandler</a> from stm32l5xx_it.o(.text.USART2_IRQHandler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[50]">USART3_IRQHandler</a> from stm32l5xx_it.o(.text.USART3_IRQHandler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[5a]">USB_FS_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[b]">UsageFault_Handler</a> from stm32l5xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[11]">WWDG_IRQHandler</a> from startup_stm32l552xx.o(.text) referenced from startup_stm32l552xx.o(RESET)
 <LI><a href="#[7b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l552xx.o(.text)
 <LI><a href="#[79]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[0]">parse_cops_cmd</a> from es600s.o(.text.parse_cops_cmd) referenced 2 times from es600s.o(.data.at_pack)
 <LI><a href="#[5]">parse_creg_cmd</a> from es600s.o(.text.parse_creg_cmd) referenced 2 times from es600s.o(.data.at_pack)
 <LI><a href="#[4]">parse_csq_cmd</a> from es600s.o(.text.parse_csq_cmd) referenced 2 times from es600s.o(.data.at_pack)
 <LI><a href="#[2]">parse_imei_cmd</a> from es600s.o(.text.parse_imei_cmd) referenced 2 times from es600s.o(.data.at_pack)
 <LI><a href="#[1]">parse_imsi_cmd</a> from es600s.o(.text.parse_imsi_cmd) referenced 2 times from es600s.o(.data.at_pack)
 <LI><a href="#[3]">parse_qccid_cmd</a> from es600s.o(.text.parse_qccid_cmd) referenced 2 times from es600s.o(.data.at_pack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(.text)
</UL>
<P><STRONG><a name="[154]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[81]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[155]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[156]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[157]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[158]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[159]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMAMUX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMAMUX1_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GTZC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RCC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RTC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMP_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USB_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l552xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Get_AngularRate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[149]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_diff_type
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_qccid_cmd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_package_type
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_imsi_cmd
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_imei_cmd
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_csq_cmd
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_creg_cmd
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cops_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_another_cmd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_data
</UL>

<P><STRONG><a name="[15a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_diff_type
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_package_type
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_recv
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
</UL>

<P><STRONG><a name="[b0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[13c]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_diff_type
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_qccid_cmd
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_imsi_cmd
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_imei_cmd
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_csq_cmd
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_creg_cmd
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cops_cmd
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_another_cmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
</UL>

<P><STRONG><a name="[a0]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_diff_type
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_recv
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComma
</UL>

<P><STRONG><a name="[8a]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_another_cmd
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[15f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[160]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[82]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[161]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[8e]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[90]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[162]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>BSP_W25Qx_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w25qxx.o(.text.BSP_W25Qx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = BSP_W25Qx_Init &rArr; BSP_W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Reset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>BSP_W25Qx_Read</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, w25qxx.o(.text.BSP_W25Qx_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = BSP_W25Qx_Read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>BSP_W25Qx_Read_ID</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, w25qxx.o(.text.BSP_W25Qx_Read_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = BSP_W25Qx_Read_ID &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>BSP_W25Qx_Write</STRONG> (Thumb, 350 bytes, Stack size 64 bytes, w25qxx.o(.text.BSP_W25Qx_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = BSP_W25Qx_Write &rArr; BSP_W25Qx_WriteEnable &rArr; BSP_W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_WriteEnable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>BSP_W25Qx_WriteEnable</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, w25qxx.o(.text.BSP_W25Qx_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = BSP_W25Qx_WriteEnable &rArr; BSP_W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Write
</UL>

<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l5xx_it.o(.text.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Rising_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l5xx_it.o(.text.EXTI5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Rising_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l5xx_it.o(.text.EXTI8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI8_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Rising_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>EnterQue</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, queue.o(.text.EnterQue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EnterQue &rArr; IsQueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsQueFull
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_interval_package_process
</UL>

<P><STRONG><a name="[b2]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, main.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[13a]"></a>GetATIndex</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, es600s.o(.text.GetATIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetATIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
</UL>

<P><STRONG><a name="[9f]"></a>GetComma</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, es600s.o(.text.GetComma))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetComma
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_creg_cmd
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_cops_cmd
</UL>

<P><STRONG><a name="[a1]"></a>GsmSendData</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, bsp_uart.o(.text.GsmSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GsmSendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
</UL>

<P><STRONG><a name="[fb]"></a>HAL_DMA_Abort</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32l5xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32l5xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>HAL_Delay</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, stm32l5xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_RST
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_PWRON
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_PWRKEY
</UL>

<P><STRONG><a name="[a5]"></a>HAL_GPIO_EXTI_Falling_Callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l5xx_hal_gpio.o(.text.HAL_GPIO_EXTI_Falling_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_Falling_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32l5xx_hal_gpio.o(.text.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Rising_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Rising_Callback
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Falling_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI8_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI5_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_GPIO_EXTI_Rising_Callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32l5xx_hal_gpio.o(.text.HAL_GPIO_EXTI_Rising_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_Rising_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_GPIO_Init</STRONG> (Thumb, 900 bytes, Stack size 52 bytes, stm32l5xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[92]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, stm32l5xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Write
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Read_ID
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_WriteEnable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Reset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_GetStatus
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_RST
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_PWRON
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_PWRKEY
</UL>

<P><STRONG><a name="[9a]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l5xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_WriteEnable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[129]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, stm32l5xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[12a]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32l5xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_I2CEx_ConfigDigitalFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[a6]"></a>HAL_I2C_Init</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32l5xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 666 bytes, Stack size 80 bytes, stm32l5xx_hal_i2c.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_read
</UL>

<P><STRONG><a name="[ad]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 648 bytes, Stack size 80 bytes, stm32l5xx_hal_i2c.o(.text.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_WriteReg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_write
</UL>

<P><STRONG><a name="[a7]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 580 bytes, Stack size 264 bytes, i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l5xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b4]"></a>HAL_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32l5xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>HAL_InitTick</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32l5xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_MspInit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, stm32l5xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUCPDDeadBattery
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bc]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32l5xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[ba]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, stm32l5xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b5]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32l5xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[c2]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, stm32l5xx_hal_pwr_ex.o(.text.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PWREx_ControlVoltageScaling &rArr; HAL_PWREx_SMPS_GetEffectiveMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_SMPS_GetEffectiveMode
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bb]"></a>HAL_PWREx_DisableUCPDDeadBattery</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l5xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableUCPDDeadBattery))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[136]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l5xx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>

<P><STRONG><a name="[c3]"></a>HAL_PWREx_SMPS_GetEffectiveMode</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32l5xx_hal_pwr_ex.o(.text.HAL_PWREx_SMPS_GetEffectiveMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWREx_SMPS_GetEffectiveMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
</UL>

<P><STRONG><a name="[b1]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1930 bytes, Stack size 56 bytes, stm32l5xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI2_Config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLLSAI1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[cd]"></a>HAL_RCC_CSSCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_CSSCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 742 bytes, Stack size 40 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysClockFreqFromPLLSource
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[140]"></a>HAL_RCC_EnableCSS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_EnableCSS))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c9]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[ca]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[cb]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c8]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 402 bytes, Stack size 36 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[cc]"></a>HAL_RCC_NMI_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_NMI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_NMI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_CSSCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[ce]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 2842 bytes, Stack size 64 bytes, stm32l5xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d0]"></a>HAL_SPI_Init</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, stm32l5xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[94]"></a>HAL_SPI_Receive</STRONG> (Thumb, 644 bytes, Stack size 72 bytes, stm32l5xx_hal_spi.o(.text.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Read_ID
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_GetStatus
</UL>

<P><STRONG><a name="[93]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, stm32l5xx_hal_spi.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Write
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Read_ID
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_WriteEnable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Reset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_GetStatus
</UL>

<P><STRONG><a name="[d2]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 1100 bytes, Stack size 88 bytes, stm32l5xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[b9]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32l5xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e4]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l5xx_hal_tim_ex.o(.text.HAL_TIMEx_Break2Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l5xx_hal_tim_ex.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l5xx_hal_tim_ex.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_CommutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[12f]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 322 bytes, Stack size 28 bytes, stm32l5xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32l5xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[d7]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[14b]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, stm32l5xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 404 bytes, Stack size 56 bytes, stm32l5xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[df]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l5xx_hal_tim.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 704 bytes, Stack size 16 bytes, stm32l5xx_hal_tim.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Loop_Sample_Aquisition &rArr; LSM6DSO_ACC_Get_AngularRate &rArr; LSM6DSO_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, tim.o(.text.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l5xx_hal_tim.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, stm32l5xx_hal_tim.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC6_SetConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC5_SetConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[ef]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32l5xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
</UL>

<P><STRONG><a name="[f0]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l5xx_hal_tim.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[e1]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l5xx_hal_tim.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 610 bytes, Stack size 80 bytes, stm32l5xx_hal_tim.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 426 bytes, Stack size 32 bytes, main.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; Loop_Sample_Aquisition &rArr; LSM6DSO_ACC_Get_AngularRate &rArr; LSM6DSO_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Sample_Aquisition
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l5xx_hal_tim.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_TriggerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32l5xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[fc]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32l5xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[100]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l5xx_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UARTEx_RxFifoFullCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l5xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[f6]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l5xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[ff]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l5xx_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UARTEx_TxFifoEmptyCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l5xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UARTEx_WakeupCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[fa]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[f7]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1168 bytes, Stack size 48 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>HAL_UART_Init</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[102]"></a>HAL_UART_MspInit</STRONG> (Thumb, 674 bytes, Stack size 296 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[106]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[108]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, main.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[a2]"></a>HAL_UART_Transmit</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendData
</UL>

<P><STRONG><a name="[141]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[123]"></a>IsQueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(.text.IsQueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsQueEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeaveQue
</UL>

<P><STRONG><a name="[9e]"></a>IsQueFull</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, queue.o(.text.IsQueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsQueFull
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterQue
</UL>

<P><STRONG><a name="[10c]"></a>LSM6DSO_ACC_GYRO_GetRawAccData</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_GetRawAccData))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = LSM6DSO_ACC_GYRO_GetRawAccData &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[10e]"></a>LSM6DSO_ACC_GYRO_GetRawGyroData</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_GetRawGyroData))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = LSM6DSO_ACC_GYRO_GetRawGyroData &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Get_AngularRate
</UL>

<P><STRONG><a name="[10f]"></a>LSM6DSO_ACC_GYRO_Get_GetFIFOData</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_Get_GetFIFOData))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = LSM6DSO_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Get_AngularRate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[110]"></a>LSM6DSO_ACC_GYRO_R_FS_125</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_R_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LSM6DSO_ACC_GYRO_R_FS_125 &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Get_AngularRate
</UL>

<P><STRONG><a name="[111]"></a>LSM6DSO_ACC_GYRO_R_FS_G</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_R_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LSM6DSO_ACC_GYRO_R_FS_G &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Get_AngularRate
</UL>

<P><STRONG><a name="[112]"></a>LSM6DSO_ACC_GYRO_R_FS_XL</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_R_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LSM6DSO_ACC_GYRO_R_FS_XL &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[113]"></a>LSM6DSO_ACC_GYRO_R_GDA</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_R_GDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LSM6DSO_ACC_GYRO_R_GDA &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Sample_Aquisition
</UL>

<P><STRONG><a name="[114]"></a>LSM6DSO_ACC_GYRO_R_WHO_AM_I</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LSM6DSO_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
</UL>

<P><STRONG><a name="[115]"></a>LSM6DSO_ACC_GYRO_R_XLDA</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_R_XLDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LSM6DSO_ACC_GYRO_R_XLDA &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Sample_Aquisition
</UL>

<P><STRONG><a name="[10d]"></a>LSM6DSO_ACC_GYRO_ReadReg</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_SW_RESET
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_ODR_XL
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_ODR_G
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_FS_XL
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_FS_G
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_BDU
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_R_XLDA
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_R_WHO_AM_I
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_R_GDA
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_R_FS_XL
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_R_FS_G
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_R_FS_125
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_Get_GetFIFOData
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_GetRawGyroData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_GetRawAccData
</UL>

<P><STRONG><a name="[116]"></a>LSM6DSO_ACC_GYRO_W_BDU</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_W_BDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LSM6DSO_ACC_GYRO_W_BDU &rArr; LSM6DSO_ACC_GYRO_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_WriteReg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LSM6DSO_ACC
</UL>

<P><STRONG><a name="[118]"></a>LSM6DSO_ACC_GYRO_W_FS_G</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_W_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LSM6DSO_ACC_GYRO_W_FS_G &rArr; LSM6DSO_ACC_GYRO_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_WriteReg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LSM6DSO_GYRO
</UL>

<P><STRONG><a name="[119]"></a>LSM6DSO_ACC_GYRO_W_FS_XL</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_W_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LSM6DSO_ACC_GYRO_W_FS_XL &rArr; LSM6DSO_ACC_GYRO_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_WriteReg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LSM6DSO_ACC
</UL>

<P><STRONG><a name="[11a]"></a>LSM6DSO_ACC_GYRO_W_ODR_G</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_W_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LSM6DSO_ACC_GYRO_W_ODR_G &rArr; LSM6DSO_ACC_GYRO_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_WriteReg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LSM6DSO_GYRO
</UL>

<P><STRONG><a name="[11b]"></a>LSM6DSO_ACC_GYRO_W_ODR_XL</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_W_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LSM6DSO_ACC_GYRO_W_ODR_XL &rArr; LSM6DSO_ACC_GYRO_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_WriteReg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LSM6DSO_ACC
</UL>

<P><STRONG><a name="[11c]"></a>LSM6DSO_ACC_GYRO_W_SW_RESET</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_W_SW_RESET))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LSM6DSO_ACC_GYRO_W_SW_RESET &rArr; LSM6DSO_ACC_GYRO_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_WriteReg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
</UL>

<P><STRONG><a name="[117]"></a>LSM6DSO_ACC_GYRO_WriteReg</STRONG> (Thumb, 86 bytes, Stack size 72 bytes, lsm6dso.o(.text.LSM6DSO_ACC_GYRO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = LSM6DSO_ACC_GYRO_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_SW_RESET
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_ODR_XL
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_ODR_G
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_FS_XL
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_FS_G
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_BDU
</UL>

<P><STRONG><a name="[11d]"></a>LSM6DSO_ACC_Get_Acceleration</STRONG> (Thumb, 366 bytes, Stack size 80 bytes, lsm6dso.o(.text.LSM6DSO_ACC_Get_Acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = LSM6DSO_ACC_Get_Acceleration &rArr; LSM6DSO_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_R_FS_XL
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_Get_GetFIFOData
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_GetRawAccData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Sample_Aquisition
</UL>

<P><STRONG><a name="[11e]"></a>LSM6DSO_ACC_Get_AngularRate</STRONG> (Thumb, 404 bytes, Stack size 96 bytes, lsm6dso.o(.text.LSM6DSO_ACC_Get_AngularRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = LSM6DSO_ACC_Get_AngularRate &rArr; LSM6DSO_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_R_FS_G
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_R_FS_125
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_Get_GetFIFOData
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_GetRawGyroData
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop_Sample_Aquisition
</UL>

<P><STRONG><a name="[11f]"></a>LSM6DSO_Init</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lsm6dso.o(.text.LSM6DSO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = LSM6DSO_Init &rArr; init_LSM6DSO_GYRO &rArr; LSM6DSO_ACC_GYRO_W_ODR_G &rArr; LSM6DSO_ACC_GYRO_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LSM6DSO_GYRO
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_LSM6DSO_ACC
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_SW_RESET
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_ReadReg
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_R_WHO_AM_I
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>LeaveQue</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, queue.o(.text.LeaveQue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LeaveQue &rArr; IsQueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsQueEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopATcmd
</UL>

<P><STRONG><a name="[f3]"></a>Loop_Sample_Aquisition</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, lsm6dso.o(.text.Loop_Sample_Aquisition))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Loop_Sample_Aquisition &rArr; LSM6DSO_ACC_Get_AngularRate &rArr; LSM6DSO_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Get_AngularRate
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_Get_Acceleration
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_R_XLDA
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_R_GDA
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[124]"></a>MODEM_PWRKEY</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, es600s.o(.text.MODEM_PWRKEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MODEM_PWRKEY &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process
</UL>

<P><STRONG><a name="[125]"></a>MODEM_PWRON</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, es600s.o(.text.MODEM_PWRON))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MODEM_PWRON &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process
</UL>

<P><STRONG><a name="[126]"></a>MODEM_RST</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, es600s.o(.text.MODEM_RST))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MODEM_RST &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process
</UL>

<P><STRONG><a name="[127]"></a>MX_GPIO_Init</STRONG> (Thumb, 500 bytes, Stack size 120 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = MX_GPIO_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>MX_I2C1_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, i2c.o(.text.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>MX_I2C3_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, i2c.o(.text.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>MX_I2C4_Init</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, i2c.o(.text.MX_I2C4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MX_I2C4_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>MX_SPI3_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, spi.o(.text.MX_SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>MX_TIM3_Init</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, tim.o(.text.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[130]"></a>MX_TIM6_Init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tim.o(.text.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>MX_UART4_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, usart.o(.text.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, usart.o(.text.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, usart.o(.text.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32l5xx_it.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NMI_Handler &rArr; HAL_RCC_NMI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_NMI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[135]"></a>PopATcmd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, protocol.o(.text.PopATcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PopATcmd &rArr; LeaveQue &rArr; IsQueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeaveQue
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process
</UL>

<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[139]"></a>Send_AT_Command</STRONG> (Thumb, 260 bytes, Stack size 304 bytes, es600s.o(.text.Send_AT_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = Send_AT_Command &rArr; GsmSendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmSendData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_data
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetATIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command_Timeout
</UL>

<P><STRONG><a name="[13d]"></a>Send_AT_Command_Timeout</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, es600s.o(.text.Send_AT_Command_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Send_AT_Command_Timeout &rArr; Send_AT_Command &rArr; GsmSendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32l5xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[13f]"></a>SystemClock_Config</STRONG> (Thumb, 146 bytes, Stack size 104 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_EnableCSS
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, system_stm32l5xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[7a]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32l5xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l5xx_it.o(.text.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = TIM6_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; Loop_Sample_Aquisition &rArr; LSM6DSO_ACC_Get_AngularRate &rArr; LSM6DSO_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSO_ACC_GYRO_ReadReg &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 424 bytes, Stack size 20 bytes, stm32l5xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[f2]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 74 bytes, Stack size 36 bytes, stm32l5xx_hal_tim.o(.text.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[da]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 52 bytes, stm32l5xx_hal_tim.o(.text.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[ea]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 382 bytes, Stack size 28 bytes, stm32l5xx_hal_tim.o(.text.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[51]"></a>UART4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l5xx_it.o(.text.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[105]"></a>UART_CheckIdleState</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, stm32l5xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[103]"></a>UART_SetConfig</STRONG> (Thumb, 1474 bytes, Stack size 96 bytes, stm32l5xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[107]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[109]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, stm32l5xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[4f]"></a>USART2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l5xx_it.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l5xx_it.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l5xx_it.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l552xx.o(RESET)
</UL>
<P><STRONG><a name="[142]"></a>at_parse_recv</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, es600s.o(.text.at_parse_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = at_parse_recv &rArr; parse_another_cmd &rArr; module_init &rArr; Send_AT_Command_Timeout &rArr; Send_AT_Command &rArr; GsmSendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_package_type
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_http_pkg
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_another_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process
</UL>

<P><STRONG><a name="[146]"></a>at_process</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, es600s.o(.text.at_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = at_process &rArr; at_parse_recv &rArr; parse_another_cmd &rArr; module_init &rArr; Send_AT_Command_Timeout &rArr; Send_AT_Command &rArr; GsmSendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_interval_package_process
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_recv
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command_Timeout
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopATcmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_RST
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_PWRON
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODEM_PWRKEY
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[153]"></a>cmpdata</STRONG> (Thumb, 90 bytes, Stack size 36 bytes, es600s.o(.text.cmpdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cmpdata
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_diff_type
</UL>

<P><STRONG><a name="[13b]"></a>get_uart_data</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, es600s.o(.text.get_uart_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_uart_data
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command
</UL>

<P><STRONG><a name="[14d]"></a>get_work_state</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, es600s.o(.text.get_work_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_work_state
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;push_interval_package_process
</UL>

<P><STRONG><a name="[121]"></a>init_LSM6DSO_ACC</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lsm6dso.o(.text.init_LSM6DSO_ACC))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = init_LSM6DSO_ACC &rArr; LSM6DSO_ACC_GYRO_W_ODR_XL &rArr; LSM6DSO_ACC_GYRO_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_ODR_XL
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_FS_XL
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_BDU
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
</UL>

<P><STRONG><a name="[120]"></a>init_LSM6DSO_GYRO</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lsm6dso.o(.text.init_LSM6DSO_GYRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = init_LSM6DSO_GYRO &rArr; LSM6DSO_ACC_GYRO_W_ODR_G &rArr; LSM6DSO_ACC_GYRO_WriteReg &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_ODR_G
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_ACC_GYRO_W_FS_G
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
</UL>

<P><STRONG><a name="[79]"></a>main</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = main &rArr; at_process &rArr; at_parse_recv &rArr; parse_another_cmd &rArr; module_init &rArr; Send_AT_Command_Timeout &rArr; Send_AT_Command &rArr; GsmSendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C4_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Write
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Read_ID
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Read
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[147]"></a>module_init</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, es600s.o(.text.module_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = module_init &rArr; Send_AT_Command_Timeout &rArr; Send_AT_Command &rArr; GsmSendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_Command_Timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_another_cmd
</UL>

<P><STRONG><a name="[145]"></a>parse_another_cmd</STRONG> (Thumb, 390 bytes, Stack size 80 bytes, es600s.o(.text.parse_another_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = parse_another_cmd &rArr; module_init &rArr; Send_AT_Command_Timeout &rArr; Send_AT_Command &rArr; GsmSendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_recv
</UL>

<P><STRONG><a name="[0]"></a>parse_cops_cmd</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, es600s.o(.text.parse_cops_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = parse_cops_cmd &rArr; GetComma
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComma
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es600s.o(.data.at_pack)
</UL>
<P><STRONG><a name="[5]"></a>parse_creg_cmd</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, es600s.o(.text.parse_creg_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = parse_creg_cmd &rArr; GetComma
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComma
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es600s.o(.data.at_pack)
</UL>
<P><STRONG><a name="[4]"></a>parse_csq_cmd</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, es600s.o(.text.parse_csq_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = parse_csq_cmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es600s.o(.data.at_pack)
</UL>
<P><STRONG><a name="[144]"></a>parse_http_pkg</STRONG> (Thumb, 22 bytes, Stack size 20 bytes, protocol.o(.text.parse_http_pkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = parse_http_pkg
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_recv
</UL>

<P><STRONG><a name="[2]"></a>parse_imei_cmd</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, es600s.o(.text.parse_imei_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = parse_imei_cmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es600s.o(.data.at_pack)
</UL>
<P><STRONG><a name="[1]"></a>parse_imsi_cmd</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, es600s.o(.text.parse_imsi_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = parse_imsi_cmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es600s.o(.data.at_pack)
</UL>
<P><STRONG><a name="[143]"></a>parse_package_type</STRONG> (Thumb, 334 bytes, Stack size 296 bytes, es600s.o(.text.parse_package_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = parse_package_type &rArr; split_diff_type &rArr; cmpdata
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_diff_type
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_recv
</UL>

<P><STRONG><a name="[3]"></a>parse_qccid_cmd</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, es600s.o(.text.parse_qccid_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = parse_qccid_cmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> es600s.o(.data.at_pack)
</UL>
<P><STRONG><a name="[148]"></a>push_interval_package_process</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, protocol.o(.text.push_interval_package_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = push_interval_package_process &rArr; EnterQue &rArr; IsQueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterQue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_work_state
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_process
</UL>

<P><STRONG><a name="[14e]"></a>spl0607_get_calib_param</STRONG> (Thumb, 654 bytes, Stack size 72 bytes, spl06.o(.text.spl0607_get_calib_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = spl0607_get_calib_param &rArr; spl0607_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_init
</UL>

<P><STRONG><a name="[14a]"></a>spl0607_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, spl06.o(.text.spl0607_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = spl0607_init &rArr; spl0607_get_calib_param &rArr; spl0607_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_start_continuous
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_read
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_rateset
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_get_calib_param
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[150]"></a>spl0607_rateset</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, spl06.o(.text.spl0607_rateset))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = spl0607_rateset &rArr; spl0607_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_init
</UL>

<P><STRONG><a name="[14f]"></a>spl0607_read</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, spl06.o(.text.spl0607_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = spl0607_read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_rateset
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_get_calib_param
</UL>

<P><STRONG><a name="[151]"></a>spl0607_start_continuous</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, spl06.o(.text.spl0607_start_continuous))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = spl0607_start_continuous &rArr; spl0607_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_init
</UL>

<P><STRONG><a name="[152]"></a>spl0607_write</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, spl06.o(.text.spl0607_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = spl0607_write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_start_continuous
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spl0607_rateset
</UL>

<P><STRONG><a name="[14c]"></a>split_diff_type</STRONG> (Thumb, 512 bytes, Stack size 96 bytes, es600s.o(.text.split_diff_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = split_diff_type &rArr; cmpdata
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmpdata
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_package_type
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[164]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[165]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[166]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[167]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10b]"></a>I2C_Flush_TXDR</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32l5xx_hal_i2c.o(.text.I2C_Flush_TXDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>

<P><STRONG><a name="[10a]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, stm32l5xx_hal_i2c.o(.text.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_TXDR
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[aa]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, stm32l5xx_hal_i2c.o(.text.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[ae]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, stm32l5xx_hal_i2c.o(.text.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[ab]"></a>I2C_TransferConfig</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, stm32l5xx_hal_i2c.o(.text.I2C_TransferConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_TransferConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[a9]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, stm32l5xx_hal_i2c.o(.text.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[ac]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, stm32l5xx_hal_i2c.o(.text.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[af]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, stm32l5xx_hal_i2c.o(.text.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed &rArr; I2C_Flush_TXDR
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[c7]"></a>RCC_GetSysClockFreqFromPLLSource</STRONG> (Thumb, 294 bytes, Stack size 28 bytes, stm32l5xx_hal_rcc.o(.text.RCC_GetSysClockFreqFromPLLSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_GetSysClockFreqFromPLLSource
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[cf]"></a>RCC_SetFlashLatencyFromMSIRange</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, stm32l5xx_hal_rcc.o(.text.RCC_SetFlashLatencyFromMSIRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCC_SetFlashLatencyFromMSIRange
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[c4]"></a>RCCEx_PLLSAI1_Config</STRONG> (Thumb, 548 bytes, Stack size 40 bytes, stm32l5xx_hal_rcc_ex.o(.text.RCCEx_PLLSAI1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCCEx_PLLSAI1_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[c5]"></a>RCCEx_PLLSAI2_Config</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, stm32l5xx_hal_rcc_ex.o(.text.RCCEx_PLLSAI2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RCCEx_PLLSAI2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[bf]"></a>NVIC_EncodePriority</STRONG> (Thumb, 128 bytes, Stack size 52 bytes, stm32l5xx_hal_cortex.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[d5]"></a>SysTick_Config</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32l5xx_hal_cortex.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[bd]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l5xx_hal_cortex.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[be]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l5xx_hal_cortex.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[c0]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32l5xx_hal_cortex.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[c1]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32l5xx_hal_cortex.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[d3]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, stm32l5xx_hal_spi.o(.text.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[d4]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, stm32l5xx_hal_spi.o(.text.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[138]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 338 bytes, Stack size 80 bytes, stm32l5xx_hal_spi.o(.text.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[137]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 314 bytes, Stack size 72 bytes, stm32l5xx_hal_spi.o(.text.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[dc]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, stm32l5xx_hal_tim.o(.text.TIM_ITRx_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[e9]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 348 bytes, Stack size 28 bytes, stm32l5xx_hal_tim.o(.text.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[eb]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 380 bytes, Stack size 28 bytes, stm32l5xx_hal_tim.o(.text.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[ec]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 228 bytes, Stack size 28 bytes, stm32l5xx_hal_tim.o(.text.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[ed]"></a>TIM_OC5_SetConfig</STRONG> (Thumb, 218 bytes, Stack size 28 bytes, stm32l5xx_hal_tim.o(.text.TIM_OC5_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_OC5_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[ee]"></a>TIM_OC6_SetConfig</STRONG> (Thumb, 220 bytes, Stack size 28 bytes, stm32l5xx_hal_tim.o(.text.TIM_OC6_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM_OC6_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[db]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, stm32l5xx_hal_tim.o(.text.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[dd]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32l5xx_hal_tim.o(.text.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[7c]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32l5xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l5xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[f8]"></a>UART_EndRxTransfer</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32l5xx_hal_uart.o(.text.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32l5xx_hal_uart.o(.text.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
</UL>
<P><STRONG><a name="[7f]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 556 bytes, Stack size 48 bytes, stm32l5xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UART_RxISR_16BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[7e]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN)
</UL>
<P><STRONG><a name="[80]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 552 bytes, Stack size 40 bytes, stm32l5xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_RxISR_8BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32l5xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[f5]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 168 bytes, Stack size 28 bytes, stm32l5xx_hal_uart_ex.o(.text.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[91]"></a>BSP_W25Qx_GetStatus</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, w25qxx.o(.text.BSP_W25Qx_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = BSP_W25Qx_GetStatus &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Write
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_WriteEnable
</UL>

<P><STRONG><a name="[96]"></a>BSP_W25Qx_Reset</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, w25qxx.o(.text.BSP_W25Qx_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = BSP_W25Qx_Reset &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_W25Qx_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
